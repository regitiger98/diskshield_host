/*
 * Copyright (C) 2011-2018 Intel Corporation. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *   * Neither the name of Intel Corporation nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

enclave {

from "sgx_tae_service.edl" import *;
	
    untrusted {

		//Authentication Enclave operation
		uint32_t AE_session_request_ocall([out, size = 576] unsigned char *dh_msg1,[out] uint32_t *session_id);
        uint32_t AE_exchange_report_ocall([in, size = 512] unsigned char *dh_msg2, [out, size = 452] unsigned char *dh_msg3, uint32_t session_id);
        uint32_t AE_send_request_ocall([in, size = req_message_size] unsigned char* req_message, size_t req_message_size, size_t max_payload_size, [out, size=resp_message_size] unsigned char* resp_message, size_t resp_message_size);
        uint32_t AE_end_session_ocall();

		

		//Diskshield operation
		
		int32_t u_diskshieldfs_exclusive_file_open([in, string] const char* filename, [out] int32_t* error_code, [in, size=32] uint8_t* mac, [in] uint32_t* version, [out, size=44] char* response, [in, size=16] uint8_t* DS_key);
		int32_t u_diskshieldfs_fclose(int32_t fd, [in, size=32] uint8_t *mac, [in] uint32_t *version, [out, size=40] char* response);
		int32_t u_diskshieldfs_fwrite_node(int32_t fd, uint64_t node_number, [in, size=node_size] uint8_t* buffer, uint32_t node_size, [in, size=32] uint8_t *mac, [in] uint32_t *version, [out, size=40] char *response);
//		int32_t u_diskshieldfs_fread_node(int32_t fd, uint64_t node_number, [out, size=node_size]uint8_t* buffer, uint32_t node_size, [in, out, size=32] uint8_t *mac, [in, out] uint32_t *version);
		int32_t u_diskshieldfs_fread_node(int32_t fd, uint64_t node_number, [out, size=node_size]uint8_t* buffer, uint32_t node_size);
		
		
		void*   u_sgxprotectedfs_exclusive_file_open([in, string] const char* filename, uint8_t read_only, [out] int64_t* file_size, [out] int32_t* error_code);
		uint8_t u_sgxprotectedfs_check_if_file_exists([in, string] const char* filename);
		int32_t u_sgxprotectedfs_fread_node([user_check] void* f, uint64_t node_number, [out, size=node_size] uint8_t* buffer, uint32_t node_size);
		int32_t u_sgxprotectedfs_fwrite_node([user_check] void* f, uint64_t node_number, [in, size=node_size] uint8_t* buffer, uint32_t node_size);
		
		//int32_t u_sgxprotectedfs_fwrite_node_ecdsa([user_check] void* f, uint64_t node_number, [in, size=node_size] uint8_t* buffer, uint32_t node_size, [in, size=64] uint8_t *p_signature);
		//int32_t u_sgxprotectedfs_fread_node_ecdsa([user_check] void* f, uint64_t node_number, [in, size=node_size] uint8_t* buffer, uint32_t node_size, [in, size=64] uint8_t *p_signature);
		
		int32_t u_sgxprotectedfs_fclose([user_check] void* f);
		uint8_t u_sgxprotectedfs_fflush([user_check] void* f);
		int32_t u_sgxprotectedfs_remove([in, string] const char* filename);

		void*   u_sgxprotectedfs_recovery_file_open([in, string] const char* filename);
		uint8_t u_sgxprotectedfs_fwrite_recovery_node([user_check] void* f, [in, count=data_length] uint8_t* data, uint32_t data_length);
		int32_t u_sgxprotectedfs_do_file_recovery([in, string] const char* filename, [in, string] const char* recovery_filename, uint32_t node_size);
    };
};
